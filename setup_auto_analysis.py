#!/usr/bin/env python3
"""
Script para configurar el an√°lisis autom√°tico de videos
"""

import subprocess
import sys
import os
from pathlib import Path

def install_requirements():
    """Instala las dependencias necesarias para el an√°lisis autom√°tico"""
    print("üîß INSTALANDO DEPENDENCIAS PARA AN√ÅLISIS AUTOM√ÅTICO")
    print("=" * 60)
    
    try:
        # Instalar opencv-python
        print("üì¶ Instalando OpenCV...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "opencv-python"])
        print("‚úÖ OpenCV instalado correctamente")
        
        # Instalar numpy si no est√° disponible
        try:
            import numpy
            print("‚úÖ NumPy ya est√° disponible")
        except ImportError:
            print("üì¶ Instalando NumPy...")
            subprocess.check_call([sys.executable, "-m", "pip", "install", "numpy"])
            print("‚úÖ NumPy instalado correctamente")
        
        print("\nüéâ Todas las dependencias instaladas correctamente!")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error instalando dependencias: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return False

def test_installation():
    """Prueba si la instalaci√≥n fue exitosa"""
    print("\nüß™ PROBANDO INSTALACI√ìN")
    print("=" * 40)
    
    try:
        import cv2
        print(f"‚úÖ OpenCV {cv2.__version__} importado correctamente")
        
        import numpy as np
        print(f"‚úÖ NumPy {np.__version__} importado correctamente")
        
        # Probar detecci√≥n de rostros
        face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
        if face_cascade.empty():
            print("‚ö†Ô∏è  Cascada de rostros no disponible")
        else:
            print("‚úÖ Cascada de rostros cargada correctamente")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Error importando m√≥dulos: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return False

def create_sample_config():
    """Crea un archivo de configuraci√≥n de ejemplo"""
    print("\nüìù CREANDO CONFIGURACI√ìN DE EJEMPLO")
    print("=" * 40)
    
    config_content = """# Configuraci√≥n autom√°tica de detecci√≥n de rostros
# Este archivo se genera autom√°ticamente

# Configuraci√≥n para videos con m√∫ltiples personas
group_videos = [
    "family_video.mp4",
    "team_meeting.avi",
    "group_photo.mov"
]

# Configuraci√≥n para videos de retrato
portrait_videos = [
    "selfie_video.mp4",
    "interview.avi",
    "presentation.mov"
]

# Configuraci√≥n para videos de baja calidad
low_quality_videos = [
    "old_recording.mp4",
    "compressed_video.avi"
]

# Los videos se analizan autom√°ticamente, pero puedes
# forzar configuraciones espec√≠ficas aqu√≠
"""
    
    try:
        with open("auto_config_example.txt", "w", encoding="utf-8") as f:
            f.write(config_content)
        print("‚úÖ Archivo de configuraci√≥n de ejemplo creado: auto_config_example.txt")
    except Exception as e:
        print(f"‚ùå Error creando archivo de configuraci√≥n: {e}")

def show_usage():
    """Muestra c√≥mo usar el sistema autom√°tico"""
    print("\nüìñ C√ìMO USAR EL AN√ÅLISIS AUTOM√ÅTICO")
    print("=" * 50)
    
    print("1Ô∏è‚É£  AN√ÅLISIS AUTOM√ÅTICO DE TODOS LOS VIDEOS:")
    print("   python face_config.py analyze")
    print("   python video_analyzer.py analyze")
    
    print("\n2Ô∏è‚É£  AN√ÅLISIS DE UN VIDEO ESPEC√çFICO:")
    print("   python video_analyzer.py video.mp4")
    
    print("\n3Ô∏è‚É£  PROCESAMIENTO AUTOM√ÅTICO:")
    print("   python batch_processor.py")
    print("   (El sistema detectar√° autom√°ticamente la configuraci√≥n √≥ptima)")
    
    print("\n4Ô∏è‚É£  VER CONFIGURACI√ìN ACTUAL:")
    print("   python face_config.py")
    print("   python show_config.py")
    
    print("\nü§ñ EL SISTEMA AUTOM√ÅTICO:")
    print("   ‚Ä¢ Analiza cada video antes de procesarlo")
    print("   ‚Ä¢ Detecta resoluci√≥n, calidad, n√∫mero de rostros")
    print("   ‚Ä¢ Configura par√°metros √≥ptimos autom√°ticamente")
    print("   ‚Ä¢ Guarda resultados en cache para reutilizar")
    print("   ‚Ä¢ No requiere configuraci√≥n manual")

def main():
    """Funci√≥n principal"""
    print("üöÄ CONFIGURADOR DE AN√ÅLISIS AUTOM√ÅTICO")
    print("=" * 60)
    
    # Verificar si ya est√°n instaladas las dependencias
    try:
        import cv2
        import numpy
        print("‚úÖ Dependencias ya est√°n instaladas")
        test_installation()
    except ImportError:
        print("üì¶ Dependencias no encontradas, instalando...")
        if not install_requirements():
            print("\n‚ùå No se pudieron instalar las dependencias")
            print("üí° Intenta instalarlas manualmente:")
            print("   pip install opencv-python numpy")
            return
        
        test_installation()
    
    # Crear configuraci√≥n de ejemplo
    create_sample_config()
    
    # Mostrar uso
    show_usage()
    
    print("\nüéØ PR√ìXIMOS PASOS:")
    print("1. Coloca tus videos en la carpeta 'videos_input'")
    print("2. Ejecuta: python face_config.py analyze")
    print("3. Ejecuta: python batch_processor.py")
    print("\n‚ú® ¬°El sistema configurar√° todo autom√°ticamente!")

if __name__ == "__main__":
    main()
